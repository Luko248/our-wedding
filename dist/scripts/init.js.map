{
  "version": 3,
  "sources": ["../../scripts/_seatingPlan.ts", "../../scripts/init.ts"],
  "sourcesContent": ["export const initSeatingPlan = () => {\r\n  const guestList = document.getElementById('guestList') as HTMLDataListElement;\r\n\r\n  fetch('/scripts/guests.json')\r\n      .then(response => response.json())\r\n      .then((data) => {\r\n          const guests = data.guests;\r\n          if (Array.isArray(guests)) {\r\n              guests.forEach(guest => {\r\n                  const option = document.createElement('option');\r\n                  option.value = guest.fullname;\r\n                  option.textContent = guest.fullname;\r\n                  guestList.appendChild(option);\r\n              });\r\n          } else {\r\n              console.error('Invalid JSON data: not an array');\r\n          }\r\n      })\r\n      .catch(error => console.error(error));\r\n\r\n\r\n      const autocomplete = document.getElementById(\"guestsSelect\") as HTMLInputElement;\r\n      const clearSelect = document.getElementById(\"clearSelect\") as HTMLButtonElement;\r\n\r\n      autocomplete.addEventListener(\"input\", () => {\r\n        const chairs = document.querySelectorAll(\".chair\");\r\n        const guests = guestList.querySelectorAll(\"option\");\r\n\r\n        const value = autocomplete.value.toLowerCase();\r\n\r\n        chairs.forEach((chair) => {\r\n          chair.classList.remove(\"chair--selected\");\r\n        });\r\n\r\n        for (let i = 0; i < guests.length; i++) {\r\n          if (guests[i].value.toLowerCase().startsWith(value)) {\r\n            chairs[i].classList.add(\"chair--selected\");\r\n            console.log(value, i);\r\n            break;\r\n          }\r\n        }\r\n      });\r\n\r\n      clearSelect.addEventListener(\"click\", () => {\r\n        autocomplete.value = \"\";\r\n        const chairs = document.querySelectorAll(\".chair\");\r\n\r\n        chairs.forEach((chair) => {\r\n          chair.classList.remove(\"chair--selected\");\r\n        });\r\n      });\r\n}", "\uFEFF// /// <reference path=\"../../node_modules/@types/googlemaps/index.d.ts\" />\r\nimport { initNav } from \"./_nav\";\r\nimport { initSeatingPlan } from \"./_seatingPlan\";\r\n\r\n\r\n// declare global {\r\n//     interface Window {\r\n//         initMap: () => void;\r\n//     }\r\n// }\r\n\r\nfunction initMap(): void {\r\n    let mapElement = document.getElementById('mapElem') as HTMLDivElement\r\n    const centerPosition = { lat: 49.412290, lng: 18.574300 };\r\n\r\n    const map = new google.maps.Map(\r\n        mapElement,\r\n        {\r\n            zoom: 17,\r\n            center: centerPosition,\r\n            mapId: '1406e53bf9ae68ff',\r\n            disableDefaultUI: true,\r\n            options: {\r\n                gestureHandling: 'cooperative',\r\n            }\r\n        }\r\n    );\r\n\r\n    const iconsUrl = \"/dist/images/map-icons/\";\r\n\r\n    const markers: Record<string, { icon: string }> = {\r\n        main: {\r\n            icon: iconsUrl + \"marker.svg\",\r\n        }\r\n    };\r\n\r\n    const positions = [\r\n        {\r\n            position: new google.maps.LatLng(49.412402, 18.569880),\r\n            type: \"main\",\r\n            title: \"Penzi\u00F3n Kriv\u00E1\u0148\",\r\n        }\r\n    ];\r\n\r\n    const infoWindow = new google.maps.InfoWindow({\r\n        content: '<div class=\"map__widnow\"><strong>Penzi\u00F3n Kriv\u00E1\u0148<strong><br><span>Lucie & Luk\u00E1\u0161 Svatba</span></div>',\r\n        ariaLabel: \"Penzi\u00F3n Kriv\u00E1\u0148\",\r\n    });\r\n\r\n    for (let i = 0; i < positions.length; i++) {\r\n        const marker = new google.maps.Marker({\r\n            position: positions[i].position,\r\n            icon: markers[positions[i].type].icon,\r\n            map: map,\r\n        });\r\n\r\n        marker.addListener(\"click\", () => {\r\n            infoWindow.open({\r\n                anchor: marker,\r\n                map,\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\ninitMap()\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    // initNav()\r\n    initSeatingPlan()\r\n})"],
  "mappings": "AAAO,IAAMA,EAAkB,IAAM,CACnC,IAAMC,EAAY,SAAS,eAAe,WAAW,EAErD,MAAM,sBAAsB,EACvB,KAAKC,GAAYA,EAAS,KAAK,CAAC,EAChC,KAAMC,GAAS,CACZ,IAAMC,EAASD,EAAK,OAChB,MAAM,QAAQC,CAAM,EACpBA,EAAO,QAAQC,GAAS,CACpB,IAAMC,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,MAAQD,EAAM,SACrBC,EAAO,YAAcD,EAAM,SAC3BJ,EAAU,YAAYK,CAAM,CAChC,CAAC,EAED,QAAQ,MAAM,iCAAiC,CAEvD,CAAC,EACA,MAAMC,GAAS,QAAQ,MAAMA,CAAK,CAAC,EAGpC,IAAMC,EAAe,SAAS,eAAe,cAAc,EACrDC,EAAc,SAAS,eAAe,aAAa,EAEzDD,EAAa,iBAAiB,QAAS,IAAM,CAC3C,IAAME,EAAS,SAAS,iBAAiB,QAAQ,EAC3CN,EAASH,EAAU,iBAAiB,QAAQ,EAE5CU,EAAQH,EAAa,MAAM,YAAY,EAE7CE,EAAO,QAASE,GAAU,CACxBA,EAAM,UAAU,OAAO,iBAAiB,CAC1C,CAAC,EAED,QAASC,EAAI,EAAGA,EAAIT,EAAO,OAAQS,IACjC,GAAIT,EAAOS,CAAC,EAAE,MAAM,YAAY,EAAE,WAAWF,CAAK,EAAG,CACnDD,EAAOG,CAAC,EAAE,UAAU,IAAI,iBAAiB,EACzC,QAAQ,IAAIF,EAAOE,CAAC,EACpB,MAGN,CAAC,EAEDJ,EAAY,iBAAiB,QAAS,IAAM,CAC1CD,EAAa,MAAQ,GACN,SAAS,iBAAiB,QAAQ,EAE1C,QAASI,GAAU,CACxBA,EAAM,UAAU,OAAO,iBAAiB,CAC1C,CAAC,CACH,CAAC,CACP,ECxCA,SAASE,GAAgB,CACrB,IAAIC,EAAa,SAAS,eAAe,SAAS,EAC5CC,EAAiB,CAAE,IAAK,SAAW,IAAK,OAAU,EAElDC,EAAM,IAAI,OAAO,KAAK,IACxBF,EACA,CACI,KAAM,GACN,OAAQC,EACR,MAAO,mBACP,iBAAkB,GAClB,QAAS,CACL,gBAAiB,aACrB,CACJ,CACJ,EAIME,EAA4C,CAC9C,KAAM,CACF,KAJS,0BAIQ,YACrB,CACJ,EAEMC,EAAY,CACd,CACI,SAAU,IAAI,OAAO,KAAK,OAAO,UAAW,QAAS,EACrD,KAAM,OACN,MAAO,2BACX,CACJ,EAEMC,EAAa,IAAI,OAAO,KAAK,WAAW,CAC1C,QAAS,wHACT,UAAW,2BACf,CAAC,EAED,QAASC,EAAI,EAAGA,EAAIF,EAAU,OAAQE,IAAK,CACvC,IAAMC,EAAS,IAAI,OAAO,KAAK,OAAO,CAClC,SAAUH,EAAUE,CAAC,EAAE,SACvB,KAAMH,EAAQC,EAAUE,CAAC,EAAE,IAAI,EAAE,KACjC,IAAKJ,CACT,CAAC,EAEDK,EAAO,YAAY,QAAS,IAAM,CAC9BF,EAAW,KAAK,CACZ,OAAQE,EACR,IAAAL,CACJ,CAAC,CACL,CAAC,EAET,CAEAH,EAAQ,EAER,SAAS,iBAAiB,mBAAoB,IAAM,CAEhDS,EAAgB,CACpB,CAAC",
  "names": ["initSeatingPlan", "guestList", "response", "data", "guests", "guest", "option", "error", "autocomplete", "clearSelect", "chairs", "value", "chair", "i", "initMap", "mapElement", "centerPosition", "map", "markers", "positions", "infoWindow", "i", "marker", "initSeatingPlan"]
}
