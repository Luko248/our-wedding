{
  "version": 3,
  "sources": ["../../node_modules/locale-essentials/index.ts", "../../scripts/localize.ts"],
  "sourcesContent": ["interface Translations {\r\n    [key: string]: string;\r\n}\r\n\r\ninterface LocalizeOptions {\r\n    langDirectory: string;\r\n    defaultLanguage?: string;\r\n    langSwitch?: HTMLElement;\r\n  }\r\n\r\n  export const localize = (options: LocalizeOptions): void => {\r\n    const { langDirectory, defaultLanguage = 'en', langSwitch } = options;\r\n  \r\n    const loadLocalization = (): void => {\r\n      let language = localStorage.getItem('language') || navigator.language || (navigator as any).userLanguage;\r\n      document.documentElement.lang = language;\r\n      const urlParams = new URLSearchParams(window.location.search);\r\n      const langParam = urlParams.get('lang');\r\n  \r\n      if (langParam) {\r\n        language = langParam;\r\n        localStorage.setItem('language', langParam);\r\n      }\r\n  \r\n      const xhr = new XMLHttpRequest();\r\n      xhr.open('GET', `${langDirectory}${language}.json`);\r\n      xhr.onload = (): void => {\r\n        if (xhr.status === 200) {\r\n          const translations: Translations = JSON.parse(xhr.responseText);\r\n          updateLocalization(translations);\r\n        } else {\r\n          const xhrDefault = new XMLHttpRequest();\r\n          xhrDefault.open('GET', `${langDirectory}${defaultLanguage}.json`);\r\n          xhrDefault.onload = (): void => {\r\n            if (xhrDefault.status === 200) {\r\n              const translations: Translations = JSON.parse(xhrDefault.responseText);\r\n              updateLocalization(translations);\r\n            }\r\n          };\r\n          xhrDefault.send();\r\n        }\r\n      };\r\n  \r\n      xhr.send();\r\n    };\r\n  \r\n    const updateLocalization = (translations: Translations): void => {\r\n      const localizedElements = document.querySelectorAll('[data-localize], [data-localize-placeholder], [data-localize-aria-label], [data-localize-title]');\r\n      localizedElements.forEach((element: Element) => {\r\n        const key = element.getAttribute('data-localize');\r\n        const placeholderKey = element.getAttribute('data-localize-placeholder');\r\n        const ariaLabelKey = element.getAttribute('data-localize-aria-label');\r\n        const titleKey = element.getAttribute('data-localize-title');\r\n    \r\n        if (key && translations[key]) {\r\n          const tagName = element.tagName.toLowerCase();\r\n          const attributesToTranslate = ['title', 'aria-label', 'placeholder'];\r\n    \r\n          if (attributesToTranslate.includes(tagName)) {\r\n            if (placeholderKey) {\r\n              (element as HTMLInputElement).setAttribute('placeholder', translations[placeholderKey]);\r\n            } else if (ariaLabelKey) {\r\n              element.setAttribute('aria-label', translations[ariaLabelKey]);\r\n            } else if (titleKey) {\r\n              element.setAttribute('title', translations[titleKey]);\r\n            }\r\n          } else {\r\n            element.textContent = translations[key];\r\n          }\r\n        }\r\n      });\r\n    };\r\n    \r\n    const setLanguage = (language: string): void => {\r\n      localStorage.setItem('language', language);\r\n      const urlParams = new URLSearchParams(window.location.search);\r\n      urlParams.set('lang', language);\r\n      window.history.replaceState({}, '', `${window.location.pathname}?${urlParams}`);\r\n      document.documentElement.lang = language;\r\n      loadLocalization();\r\n    };\r\n  \r\n    const registerLangSwitchListener = (langSwitch?: HTMLElement): void => {\r\n      if (langSwitch) {\r\n        langSwitch.addEventListener('click', (e: Event) => {\r\n          if (e.target && (e.target as HTMLElement).matches('button[data-lang]')) {\r\n            const lang = (e.target as HTMLElement).getAttribute('data-lang');\r\n            if (lang) {\r\n              setLanguage(lang);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    };\r\n  \r\n    loadLocalization();\r\n    registerLangSwitchListener(langSwitch);\r\n  };\r\n  ", "import { localize } from 'locale-essentials';\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n\r\n  const langSwitchElem = document.querySelector('.lang-switch__pop-up') as HTMLDivElement\r\n\r\n  const localizeOptions = {\r\n    langDirectory: '../texts/',\r\n    defaultLanguage: 'sk',\r\n    langSwitch: langSwitchElem\r\n  }\r\n  localize(localizeOptions)\r\n})\r\n"],
  "mappings": "AAUS,IAAMA,EAAYC,GAAmC,CAC1D,GAAM,CAAE,cAAAC,EAAe,gBAAAC,EAAkB,KAAM,WAAAC,CAAW,EAAIH,EAExDI,EAAmB,IAAY,CACnC,IAAIC,EAAW,aAAa,QAAQ,UAAU,GAAK,UAAU,UAAa,UAAkB,aAC5F,SAAS,gBAAgB,KAAOA,EAEhC,IAAMC,EADY,IAAI,gBAAgB,OAAO,SAAS,MAAM,EAChC,IAAI,MAAM,EAElCA,IACFD,EAAWC,EACX,aAAa,QAAQ,WAAYA,CAAS,GAG5C,IAAMC,EAAM,IAAI,eAChBA,EAAI,KAAK,MAAO,GAAGN,CAAa,GAAGI,CAAQ,OAAO,EAClDE,EAAI,OAAS,IAAY,CACvB,GAAIA,EAAI,SAAW,IAAK,CACtB,IAAMC,EAA6B,KAAK,MAAMD,EAAI,YAAY,EAC9DE,EAAmBD,CAAY,CACjC,KAAO,CACL,IAAME,EAAa,IAAI,eACvBA,EAAW,KAAK,MAAO,GAAGT,CAAa,GAAGC,CAAe,OAAO,EAChEQ,EAAW,OAAS,IAAY,CAC9B,GAAIA,EAAW,SAAW,IAAK,CAC7B,IAAMF,EAA6B,KAAK,MAAME,EAAW,YAAY,EACrED,EAAmBD,CAAY,CACjC,CACF,EACAE,EAAW,KAAK,CAClB,CACF,EAEAH,EAAI,KAAK,CACX,EAEME,EAAsBD,GAAqC,CACrC,SAAS,iBAAiB,iGAAiG,EACnI,QAASG,GAAqB,CAC9C,IAAMC,EAAMD,EAAQ,aAAa,eAAe,EAC1CE,EAAiBF,EAAQ,aAAa,2BAA2B,EACjEG,EAAeH,EAAQ,aAAa,0BAA0B,EAC9DI,EAAWJ,EAAQ,aAAa,qBAAqB,EAE3D,GAAIC,GAAOJ,EAAaI,CAAG,EAAG,CAC5B,IAAMI,EAAUL,EAAQ,QAAQ,YAAY,EACd,CAAC,QAAS,aAAc,aAAa,EAEzC,SAASK,CAAO,EACpCH,EACDF,EAA6B,aAAa,cAAeH,EAAaK,CAAc,CAAC,EAC7EC,EACTH,EAAQ,aAAa,aAAcH,EAAaM,CAAY,CAAC,EACpDC,GACTJ,EAAQ,aAAa,QAASH,EAAaO,CAAQ,CAAC,EAGtDJ,EAAQ,YAAcH,EAAaI,CAAG,CAE1C,CACF,CAAC,CACH,EAEMK,EAAeZ,GAA2B,CAC9C,aAAa,QAAQ,WAAYA,CAAQ,EACzC,IAAMa,EAAY,IAAI,gBAAgB,OAAO,SAAS,MAAM,EAC5DA,EAAU,IAAI,OAAQb,CAAQ,EAC9B,OAAO,QAAQ,aAAa,CAAC,EAAG,GAAI,GAAG,OAAO,SAAS,QAAQ,IAAIa,CAAS,EAAE,EAC9E,SAAS,gBAAgB,KAAOb,EAChCD,EAAiB,CACnB,EAEMe,EAA8BhB,GAAmC,CACjEA,GACFA,EAAW,iBAAiB,QAAUiB,GAAa,CACjD,GAAIA,EAAE,QAAWA,EAAE,OAAuB,QAAQ,mBAAmB,EAAG,CACtE,IAAMC,EAAQD,EAAE,OAAuB,aAAa,WAAW,EAC3DC,GACFJ,EAAYI,CAAI,CAEpB,CACF,CAAC,CAEL,EAEAjB,EAAiB,EACjBe,EAA2BhB,CAAU,CACvC,EC/FF,SAAS,iBAAiB,mBAAoB,IAAM,CAIlD,IAAMmB,EAAkB,CACtB,cAAe,YACf,gBAAiB,KACjB,WALqB,SAAS,cAAc,sBAAsB,CAMpE,EACAC,EAASD,CAAe,CAC1B,CAAC",
  "names": ["localize", "options", "langDirectory", "defaultLanguage", "langSwitch", "loadLocalization", "language", "langParam", "xhr", "translations", "updateLocalization", "xhrDefault", "element", "key", "placeholderKey", "ariaLabelKey", "titleKey", "tagName", "setLanguage", "urlParams", "registerLangSwitchListener", "e", "lang", "localizeOptions", "localize"]
}
